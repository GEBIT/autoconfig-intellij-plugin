package de.gebit.plugins.autoconfig.create;

import com.intellij.openapi.module.Module;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.gebit.plugins.autoconfig.UpdateHandler;
import de.gebit.plugins.autoconfig.UpdateSettings;
import de.gebit.plugins.autoconfig.UpdateTarget;
import de.gebit.plugins.autoconfig.messages.AutoconfigBundle;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

/**
 * Form displaying a dropdown with {@link UpdateHandler}s to choose from
 */
public class CreateAutoconfigFileForm {

	private JComboBox<SettingsComboBoxWrapper> settingsSelection;
	@Getter
	private JPanel form;
	private JComboBox<ModuleComboBoxWrapper> moduleSelection;

	public CreateAutoconfigFileForm(List<UpdateSettings<?>> handlers, List<Module> moduleList) {
		SettingsComboBoxWrapper[] comboBoxWrappers = handlers.stream()
				.sorted(Comparator.comparing(UpdateSettings::getUpdaterName))
				.map(SettingsComboBoxWrapper::new)
				.toArray(SettingsComboBoxWrapper[]::new);
		ModuleComboBoxWrapper[] modules = moduleList.stream()
				.sorted(Comparator.comparing(Module::getName))
				.map(ModuleComboBoxWrapper::new)
				.toArray(ModuleComboBoxWrapper[]::new);
		moduleSelection.setModel(new DefaultComboBoxModel<>(modules));
		settingsSelection.setModel(new DefaultComboBoxModel<>(comboBoxWrappers));
		settingsSelection.addActionListener(event -> {
			if (event.getSource() instanceof JComboBox<?> comboBox && comboBox.getSelectedItem() instanceof SettingsComboBoxWrapper selectedItem) {
				updateModuleSelectionModel(selectedItem);
			}
		});
		if (comboBoxWrappers.length > 0) {
			updateModuleSelectionModel(comboBoxWrappers[0]);
		}
	}

	private void updateModuleSelectionModel(SettingsComboBoxWrapper selectedSetting) {
		moduleSelection.setEnabled(selectedSetting.handler().getUpdateTarget().equals(UpdateTarget.MODULE));
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
	 * code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		form = new JPanel();
		form.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
		settingsSelection = new JComboBox();
		form.add(settingsSelection,
				new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
						GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
						false));
		final JLabel label1 = new JLabel();
		this.$$$loadLabelText$$$(label1,
				this.$$$getMessageFromBundle$$$("de/gebit/plugins/autoconfig/messages/AutoconfigBundle",
						"createautoconfigfile.selectplugin"));
		form.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		form.add(spacer1,
				new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
						GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		moduleSelection = new JComboBox();
		moduleSelection.setEnabled(false);
		form.add(moduleSelection,
				new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
						GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
						false));
		final JLabel label2 = new JLabel();
		this.$$$loadLabelText$$$(label2,
				this.$$$getMessageFromBundle$$$("de/gebit/plugins/autoconfig/messages/AutoconfigBundle",
						"createautoconfigfile.selectfile"));
		form.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		this.$$$loadLabelText$$$(label3,
				this.$$$getMessageFromBundle$$$("de/gebit/plugins/autoconfig/messages/AutoconfigBundle",
						"createautoconfigfile.selectmodule"));
		form.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		label2.setLabelFor(settingsSelection);
		label3.setLabelFor(moduleSelection);
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) {
					break;
				}
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return form;
	}

	private record SettingsComboBoxWrapper(UpdateSettings<?> handler) {
		@Override
		public String toString() {
			return handler.getUpdaterName() + (handler.getUpdateTarget()
					.equals(UpdateTarget.MODULE) ? " (" + AutoconfigBundle.message(
					"createautoconfigfile.moduleaddition") + ")" : "");
		}
	}

	private record ModuleComboBoxWrapper(Module module) {
		@Override
		public String toString() {
			return module.getName();
		}
	}

	public Optional<UpdateSettings<?>> getSelectedSettings() {
		if (settingsSelection.getSelectedItem() instanceof SettingsComboBoxWrapper settingsComboBoxWrapper) {
			return Optional.of(settingsComboBoxWrapper.handler());
		} else {
			return Optional.empty();
		}
	}

	public Optional<Module> getSelectedModule() {
		if (moduleSelection.getSelectedItem() instanceof ModuleComboBoxWrapper moduleComboBoxWrapper) {
			return Optional.of(moduleComboBoxWrapper.module());
		}
		return Optional.empty();
	}
}
