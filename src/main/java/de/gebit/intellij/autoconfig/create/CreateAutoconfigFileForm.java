package de.gebit.intellij.autoconfig.create;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.gebit.intellij.autoconfig.UpdateHandler;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.Optional;

/**
 * Form displaying a dropdown with {@link UpdateHandler}s to choose from
 */
public class CreateAutoconfigFileForm {

	private JComboBox<HandlerComboBoxWrapper> handlerSelection;
	@Getter
	private JPanel form;

	public CreateAutoconfigFileForm(List<UpdateHandler<?>> handlers) {
		ComboBoxModel<HandlerComboBoxWrapper> comboBoxModel = new DefaultComboBoxModel<HandlerComboBoxWrapper>(handlers.stream().map(HandlerComboBoxWrapper::new).toArray(HandlerComboBoxWrapper[]::new));
		handlerSelection.setModel(comboBoxModel);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		form = new JPanel();
		form.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		handlerSelection = new JComboBox();
		form.add(handlerSelection, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Select which Plugin to create the Autoconfig File for");
		form.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		form.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return form;
	}

	private record HandlerComboBoxWrapper(UpdateHandler<?> handler) {
		@Override
		public String toString() {
			return handler.getUpdaterName();
		}
	}

	public Optional<UpdateHandler<?>> getSelectedHandler() {
		if (handlerSelection.getSelectedItem() instanceof HandlerComboBoxWrapper handlerComboBoxWrapper) {
			return Optional.of(handlerComboBoxWrapper.handler());
		} else {
			return Optional.empty();
		}
	}

}
